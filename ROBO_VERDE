// Portas driver motor
#define PININ1 2
#define PININ2 4

// Portas sensor QTR
#define S1 A3
#define S2 A4

// Valores de ajustes para o seguidor de linha MIF
#define TRESHOLD 700                       // Valor de referencia para cor da linha branca
#define SPEED0 255                          // Valor de 0 a 255 para velocidade com a seguinte leitura do sensor (0 0 1 1 0 0) 
#define SPEED1 220                          // Valor de 0 a 255 para velocidade com a seguinte leitura do sensor (0 0 1 1 1 0) 

#define SPEED2 150                          // Valor de 0 a 255 para velocidade com a seguinte leitura do sensor (0 0 0 1 0 0) 
#define SPEED3 100                          // Valor de 0 a 255 para velocidade com a seguinte leitura do sensor (0 0 0 1 1 0)  
#define SPEED4 80                          // Valor de 0 a 255 para velocidade com a seguinte leitura do sensor (0 0 0 1 1 1) 

#define SPEED5 50                            // Valor de 0 a 255 para velocidade com a seguinte leitura do sensor (0 0 0 0 1 0) 
#define SPEED6 0                            // Valor de 0 a 255 para velocidade com a seguinte leitura do sensor (0 0 0 0 1 1) 
#define SPEED7 200                          // Valor de 0 a 255 para velocidade com a seguinte leitura do sensor (0 0 0 0 0 1) 

#define RUNTIME 15500                      // Valor para executar o percurso 

void setup() {
  Serial.begin(9600);
}

void loop() {
  // TESTE 1°: leituta sensor
 // int s[6];
  //readSensors(true, s);
  // TESTE 2°: motor esquerda
  //motorOption('4',255,255);
   //TESTE 3°: motor direita
 // motorOption('6', 255, 255);
  // TESTE 4°: seguidor de linha
  followLineMEF();
  // TESTE 5°: teste led RGB
  //rgbControl(0,0,255,0);
}

void motorControl(int speedLeft, int speedRight) {
  // Função para controle do driver de motor

  // Definições das portas digitais
  pinMode(PININ1, OUTPUT);
  pinMode(PININ2, OUTPUT);
  
  analogWrite (PINEN1, speedLeft);
  analogWrite (PINEN2, speedRight);
  
  // Ajustes motor da esquerda
  if (speedLeft <= 0) {
    speedLeft = -speedLeft;
    digitalWrite (PININ1, HIGH);
    digitalWrite (PININ2, LOW);
  } else {
    digitalWrite (PININ1, LOW);
    digitalWrite (PININ2, HIGH);
  }

  // Ajustes motor da direita
  if (speedRight < 0) {
    speedRight = -speedRight;
    digitalWrite (PININ1, LOW);
    digitalWrite (PININ2, HIGH);
  } else {
    digitalWrite (PININ1, HIGH);
    digitalWrite (PININ2, LOW);
  }
  analogWrite (PINENA, speedLeft);
  analogWrite (PINENB, speedRight);
}

void motorOption(char option, int speedLeft, int speedRight) {
  // Função para controle de motor com pre definições
  switch (option) {
    case '8': // Frente
      motorControl(-speedLeft, speedRight);
      break;
    case '2': // Tras
      motorControl(speedLeft, -speedRight);
      break;
    case '4': // Esqueda
      motorControl(-speedLeft, -speedRight);
      break;
    case '6': // Direita
      motorControl(speedLeft, speedRight);
      break;
    case '0': // Parar
      motorControl(0, 0);
      break;
  }
}

bool motorStop(long runtime, long currentTime) {
  // Função de parada do robô
  if (millis() >= (runtime + currentTime)) {
    motorOption('0', 0, 0);
    int cont = 0;
    while (true) {
      cont++;
    }
    return false;
  }
  return true;
}


void readSensors(bool readSerial, int *sensors) {
  // Função para leitura dos sensores
  sensors[0] = analogRead(S1);
  sensors[1] = analogRead(S2);
  if (readSerial) {
    Serial.print(sensors[0]);
    Serial.print(' ');
    Serial.print(sensors[1]);
    Serial.print(' ');
  }
}

void followLineMEF(void) {
  // Função para controle do seguidor de linha em modo de maquina de estado finita
  bool flag = true;
  long currentTime = millis();

  while (flag) {
    // Flag para verificar a parada
    flag = motorStop(RUNTIME, currentTime);

    // Leitura sensores
    int s[2];
    readSensors(false, s);
    int p1, p2;
    
    if(s[0]>= TRESHOLD)p1=1;
    else p1=0;
    if(s[1]>= TRESHOLD)p2=1;
    else p2=0;
    
    // leitura do sensor (1 1)
    if (p1==1 && p2==1 ) {
      motorOption('8', SPEED0, SPEED0);
      // leitura do sensor (0 0)
    } else if (p1==0 && p2==0 ) {
      motorOption('0', SPEED0, SPEED0);
      // leitura do sensor (1 0)
    } else if (p1==0 && p2==1 ) {
      motorOption('0', SPEED7, SPEED7);
      // leitura do sensor (0 1)
    } else if (p1==1 && p2==0 ) {
      motorOption('0', SPEED7, SPEED7);
    }
  }
}
